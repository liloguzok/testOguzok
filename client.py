from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import kb_client, kb_client_number, buy_menu
from aiogram.types import ReplyKeyboardRemove
from data_base import sqlite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton,ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from pyqiwip2p import QiwiP2P

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
import random

key_qiwi = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Ijgyd3g0Zi0wMCIsInVzZXJfaWQiOiI3OTg1MjA1MjQ0OSIsInNlY3JldCI6Ijc5OWE2MzM4YzE0MjdkZmY1YjhmOTA3NzQwOGM3MDJlODM1MGRlMTE0NGU3MmJjMmJjODQ3NTViNmZjNTdmZmEifX0='

p2p = QiwiP2P(auth_key=key_qiwi)
db = sqlite_db.Database('shop_data.db')

class balance(StatesGroup):
	need_balance = State()
#@dp.message_handler(commands=['–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥']) 
async def up_balance(message : types.CallbackQuery):
	callback = message
	await callback.message.delete()
	await bot.send_message(message.from_user.id,'üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö',reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')))
	await balance.need_balance.set()
def is_number(_str):
	try:
		int(_str)
		return True
	except ValueError:
		return False

async def balance_uper(message: types.Message, state: FSMContext):
	if message.text!="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è":
		if message.chat.type == 'private':
			if is_number(message.text):
				if int(message.text)>=15:
					global message_money
					message_money = int(message.text)
					comment = str(message.from_user.id)+"_"+str(random.randint(1000,9999))
					bill = p2p.bill(amount = message_money,lifetime=15,comment=comment)


					db.add_check(message.from_user.id,message_money,bill.bill_id)

					await bot.send_message(message.from_user.id,f"–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message_money} —Ä—É–±. –Ω–∞ –Ω–∞—à —Å—á–µ—Ç –∫–∏–≤–∏\n–°—Å—ã–ª–∫—É: {bill.pay_url}\n–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}",reply_markup=buy_menu(url=bill.pay_url,bill=bill.bill_id))
					await state.finish()
				else:
					await bot.send_message(message.from_user.id,"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 15 —Ä—É–±.")
			else:
				await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
			
	else:
		await state.finish()
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)


async def check(callback: types.CallbackQuery):
	global message_money
	bill = str(callback.data[6:])
	info = db.get_check(bill)
	if info != False:
		if str(p2p.check(bill_id=bill).status) =="PAID":
			user_money = db.user_money(callback.from_user.id)

			money = int(info[2])
			db.set_money(callback.from_user.id, user_money+money)
			await bot.send_message(callback.from_user.id,f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {message_money} —Ä—É–±.")
			db.delete_check(bill)
		else:
			await bot.send_message(callback.from_user.id,"–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",reply_markup=buy_menu(False,bill=bill))
	else:
		await bot.send_message(callback.from_user.id,"–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


Name_bay = None
#@dp.message_handler(commands=['start','help'])
async def commands_start(message : types.Message):
	if db.user_exists(message.from_user.id) == False:
		db.add_user(message.from_user.id)
	try:
		await bot.send_message(message.from_user.id,"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb_client)
		await message.delete()
	except:
		await message.reply("–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ª—Å, –ø–∏—à–∏ –µ–º—É")

async def mein_menu(message: types.Message):
	await bot.send_message(message.from_user.id,"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è", reply_markup=kb_client)
#@dp.message_handler(commands=['–¢–µ—Ö.–ø–æ–º–æ—â'])
async def pizza_open_command(message : types.Message):
	await bot.send_message(message.from_user.id,'–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?',reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è',callback_data = 'tech_help_')))

#@dp.message_handler(commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
async def pizza_place_command(message : types.Message):
	await bot.send_message(message.from_user.id,"–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã: @Re_zxShaSty")

#@dp.message_handler(commands=['GJREGFDNM'])—Ç—É—Ç –ø–æ–∫—É–ø–∫–∞
async def pokupka(message : types.Message):
	await bot.send_message(-1001547431503,"@" + message.from_user.username + ": " + message.text[6:])

class Number(StatesGroup):
	Number_user = State()
class Number_akk(StatesGroup):
	Number_user = State()
class usl_akk_data(StatesGroup):
	log = State()
	#pas = State()

#@dp.callback_bay_handler(lambda x: x.data and x.data.startswith('del ')) –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
async def del_bays_uls_run(bay: types.CallbackQuery):
	global bay_data
	bay_data = bay
	await usl_akk_data.log.set()
	await bot.send_message(bay.from_user.id,'–ù–∞–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞–Ω—É—Ç–∞ —á—Ç–æ –±—ã –æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω\n–ï—Å–ª–∏ –ø–æ–π–º–µ—Ç–µ —á—Ç–æ –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞',reply_markup = ReplyKeyboardMarkup().add(KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')))

async def save_log_usl(message:types.Message,state: FSMContext):
	if message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è':
		global log_usl
		log_usl = message.text
		await state.finish()
		await bot.send_message(message.from_user.id,f'–õ–æ–≥–∏–Ω: {log_usl}\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text = "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å",callback_data =f'$')))
	else:
		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
		await state.finish()






#	if message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è':
#		global log_usl
#		log_usl = message.text
#		await bot.send_message(message.from_user.id,'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
#		await usl_akk_data.next()
#	else:
#		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
#		await state.finish()

#async def save_pass_usl(message:types.Message,state: FSMContext):
#	if message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è':
#		global pass_usl
#		pass_usl = message.text
#		await state.finish()
#		await bot.send_message(message.from_user.id,f'–õ–æ–≥–∏–Ω: {log_usl}\n–ü–∞—Ä–æ–ª—å: {pass_usl}\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton(text = "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å",callback_data =f'$')))
#	else:
#		await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è',reply_markup=kb_client)
#		await state.finish()

async def del_bays_uls_run_dollar(bay: types.CallbackQuery):
	global Name_bay
	bay=bay_data 
	Name = ((bay['data']).strip('$Send_bay_usl')).split(',')
	Name_b = Name[0][3:-1]
	price = int(Name[1][2:-2])
	Name_bay = Name_b
	user_money = db.user_money(bay.from_user.id)
	if user_money >= price:
			if bay.from_user.username is not None:
				db.set_money(bay.from_user.id,user_money-price)
				await bay.message.answer('–í–∞—à –∑–∞–∫–∞–∑' +(' "')+Name_bay+('" ') +'–ø–µ—Ä–µ–¥–∞–Ω '+(f'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–º–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—è —É—Å–ª—É–≥–∏'))
				await bot.send_message(-1001547431503,"@" + str(bay.from_user.username) +  " –∫—É–ø–∏–ª:"+Name_bay+f'\n–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n–õ–æ–≥–∏–Ω:{log_usl}')						
			else:
				await bay.message.answer('–ß—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.–í–≤–µ–¥–∏ –µ–≥–æ —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è)')
				await Number_akk.Number_user.set()
	else:
		await bay.message.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç')




#–¥–ª—è –Ω–æ–º–µ—Ä–∞
#async def load_Number(message : types.Message):
	#await Number.Number_user.set()
	#await bot.send_message(message.from_user.id,'–ß—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.–í–≤–µ–¥–∏ –µ–≥–æ —á—Ç–æ –±—ã\
	# –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è', reply_markup=kb_client_number)
	

#—Å–æ—Ö—Ä –Ω–æ–º–µ—Ä–∞
#@dp.message_handler(state=FSMAdmin.name)
async def Save_number_usl(bay: types.Message, state: FSMContext):
		global Name_bay
		message = bay
		Name_bay = Name_bay
		if len(str(message))<258:
			await message.reply('—ç—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º, –ø–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ—à–∏–±–ª–∏—Å—å –ª–∏ –≤—ã')

		else:
			async with state.proxy() as data:
				data['Number_user'] = message.text
			await message.answer('–í–∞—à –∑–∞–∫–∞–∑' +(' "')+Name_bay+('" ') +'–ø–µ—Ä–µ–¥–∞–Ω '+(f'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–º–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—è —É—Å–ª—É–≥–∏'))
			await bot.send_message(-1001547431503,"@" + str(bay.from_user.username) +  " –∫—É–ø–∏–ª:"+Name_bay+f'\n–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n–õ–æ–≥–∏–Ω:{log_usl}')
			await state.finish()








async def del_bays_akk_run(bay: types.CallbackQuery):
	global Name_bay
	Name = ((bay['data']).strip('Send_bay')).split(',')
	Name_b = Name[0][3:-1]
	price = int(Name[1][2:-2])
	Name_bay = Name_b
	global pas
	global log
	log = passwords.get(Name_bay)[0]
	pas = passwords.get(Name_bay)[1]
	user_money = db.user_money(bay.from_user.id)
	if user_money >= price:
		if bay.from_user.username is not None:
			db.set_money(bay.from_user.id,user_money-price)
			await bay.message.answer('–í–∞—à –∑–∞–∫–∞–∑' +(' "')+Name_bay+('" ') +'–ø–µ—Ä–µ–¥–∞–Ω '+(f'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å–∫–æ—Ä–æ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è,–∞ –ø–æ–∫–∞ –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n–õ–æ–≥–∏–Ω: {log}\n–ü–∞—Ä–æ–ª—å: {pas}'))	
			await bot.send_message(-1001547431503,"@" + str(bay.from_user.username) +  " —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å:"+Name_bay)
			if ('Tanks' in Name_bay) or ('wot' in Name_bay):
				sqlite_db.sql_delete_akk_wot(Name_bay)
			if 'Brawl' in Name_bay:
				sqlite_db.sql_delete_akk_brawl(Name_bay)
			if 'PUBG' in Name_bay:
				sqlite_db.sql_delete_akk_PUBG(Name_bay)
			if 'standoff' in Name_bay:
				sqlite_db.sql_delete_akk_standoff(Name_bay)				
		else:
			await bay.message.answer('–ß—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.–í–≤–µ–¥–∏ –µ–≥–æ —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è)')
			await Number.Number_user.set()
	else:
		await bay.message.answer('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç')
class help_number(StatesGroup):
	nomer = State()
async def tech_help(callback:types.CallbackQuery):
	if callback.from_user.username is not None:
		await bot.send_message(-1001547431503,"@" + str(callback.from_user.username) +  " —Ö–æ—á–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
	else:
		await callback.message.answer('–ß—Ç–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.–í–≤–µ–¥–∏ –µ–≥–æ —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è)')
		await help_number.nomer.set()

async def Save_number_help(message: types.Message, state: FSMContext):
	if len(str(message))<258:
		await message.reply('—ç—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º, –ø–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ—à–∏–±–ª–∏—Å—å –ª–∏ –≤—ã')	
	else:
		async with state.proxy() as data:
			data['Number_user'] = message.text
		await state.finish()
		await bot.send_message(-1001547431503,"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º " + str(message.text) +  " —Ö–æ—á–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def Save_number(message: types.Message, state: FSMContext):
		global Name_bay
		Name_bay = Name_bay
		if len(str(message))<258:
			await message.reply('—ç—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä–æ–º, –ø–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ—à–∏–±–ª–∏—Å—å –ª–∏ –≤—ã')
		else:
			async with state.proxy() as data:
				data['Number_user'] = message.text
			await state.finish()
			await message.reply(f'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Å–∫–æ—Ä–æ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è,–∞ –ø–æ–∫–∞ –≤–æ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n–õ–æ–≥–∏–Ω: {log_usl}')
			await bot.send_message(-1001547431503,"–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º " + str(message.text) +  " —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å:"+Name_bay)
			if ('Tanks' in Name_bay) or ('wot' in Name_bay):
				sqlite_db.sql_delete_akk_wot(Name_bay)
			if 'Brawl' in Name_bay:
				sqlite_db.sql_delete_akk_brawl(Name_bay)
			if 'PUBG' in Name_bay:
				sqlite_db.sql_delete_akk_PUBG(Name_bay)
			if 'standoff' in Name_bay:
				sqlite_db.sql_delete_akk_standoff(Name_bay)	







async def get_click(message:types.Message):
	await bot.send_message(message.from_user.id,'+1',reply_markup = ReplyKeyboardMarkup(resize_keyboard = True).add(KeyboardButton('–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')).add(KeyboardButton('–ï—â–µ –∫–∞–∫–∞—è –Ω–∏–±—É–¥—å –∫–Ω–æ–ø–∫–∞')))



#–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
async def show_types_shop(message : types.Message):
	kb_show = InlineKeyboardMarkup().add(InlineKeyboardButton("–ê–∫–∫–∞—É–Ω—Ç—ã",callback_data = 'show_akk_shop_'))\
		.add(InlineKeyboardButton("–£—Å–ª—É–≥–∏",callback_data = 'show_uslugi_shop_'))
	await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:',reply_markup =kb_show )

async def show_akk_shop(callback:types.CallbackQuery):
	await callback.message.delete()
	kb_show = InlineKeyboardMarkup().add(InlineKeyboardButton("World Of Tanks Blitz",callback_data = 'akk_WOT_Blitz_'))\
		.add(InlineKeyboardButton("Brawl Stars",callback_data = 'akk_Brawl_stars_'))\
		.add(InlineKeyboardButton("PUBG Mobile",callback_data = 'akk_PUBG_M_'))\
		.add(InlineKeyboardButton("Standoff 2",callback_data = 'akk_Standoff_'))\
		.add(InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data = 'back_to_shop_'))
	await bot.send_message(callback.from_user.id,'–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤:',reply_markup =kb_show )	


async def show_uslugi_shop(callback:types.CallbackQuery):
	await callback.message.delete()
	kb_show = InlineKeyboardMarkup().add(InlineKeyboardButton("World Of Tanks Blitz",callback_data = 'usl_WOT_Blitz_'))\
		.add(InlineKeyboardButton("Brawl Stars",callback_data = 'usl_Brawl_stars_'))\
		.add(InlineKeyboardButton("PUBG Mobile",callback_data = 'usl_PUBG_M_'))\
		.add(InlineKeyboardButton("Standoff 2",callback_data = 'usl_Standoff_'))\
		.add(InlineKeyboardButton("–ù–∞–∑–∞–¥",callback_data = 'back_to_shop_'))
	await bot.send_message(callback.from_user.id,'–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:',reply_markup =kb_show )	

async def back_to_shop(callback : types.CallbackQuery):
	await callback.message.delete()
	await show_types_shop((callback))
#–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–æ–≤
async def akk_WOT_Blitz(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_akk_wot()
	global passwords
	passwords = {} 
	for ret in read:
		passwords.update({ret[1]:(ret[4],ret[5])})
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1],ret[3]}')),disable_notification=True)
		#await bot.send_message(message.from_user.id, text='^^^', reply_markup=InlineKeyboardMarkup().\
		#	add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')	

async def akk_Brawl_stars(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_akk_brawl()
	global passwords
	passwords = {} 
	for ret in read:
		passwords.update({ret[1]:(ret[4],ret[5])})
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')

async def akk_PUBG_M(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_akk_PUBG()
	global passwords
	passwords = {} 
	for ret in read:
		passwords.update({ret[1]:(ret[4],ret[5])})
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')

async def akk_Standoff(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_akk_standoff()
	global passwords
	passwords = {} 
	for ret in read:
		passwords.update({ret[1]:(ret[4],ret[5])})
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')


async def usl_WOT_Blitz(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_usl_wot()
	for ret in read:
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay_usl {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')	

async def usl_Brawl_stars(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_usl_brawl()
	for ret in read:
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay_usl {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')	

async def usl_PUBG(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_usl_PUBG()
	for ret in read:
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay_usl {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')

async def usl_Standoff(message:types.CallbackQuery):
	callback = message
	await callback.message.delete()
	read = await sqlite_db.sql_read_usl_standoff()
	for ret in read:
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[3]}',reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay_usl {ret[1],ret[3]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')

#@dp.message_handler(commands=['–¢–æ–≤–∞—Ä—ã'])
async def pizza_menu_command(message : types.CallbackQuery):

	#await sqlite_db.sql_read(message)
	read = await sqlite_db.sql_read2()
	for ret in read:
		await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ:{ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}',disable_notification=True)
		await bot.send_message(message.from_user.id, text='^^^', reply_markup=InlineKeyboardMarkup().\
			add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å {ret[1]}', callback_data=f'Send_bay {ret[1]}')),disable_notification=True)
	await bot.send_message(message.from_user.id,'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–≤–∞—Ä–æ–≤, —á—Ç–æ –±—ã –∫—É–ø–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º')



async def my_balance(message:types.Message):
	user_money = db.user_money(message.from_user.id)
	await bot.send_message(message.from_user.id,f'üí∏–ë–∞–ª–∞–Ω—Å: {user_money} —Ä.',reply_markup = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥',callback_data = '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥_')))

def register_handlers_client(dp : Dispatcher):
	dp.register_message_handler(get_click, Text(equals='–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))

	dp.register_message_handler(mein_menu, Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è'))
	dp.register_message_handler(commands_start,commands=['start','help'])
	dp.register_message_handler(pizza_open_command, Text(equals='–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë§'))
	dp.register_message_handler(pizza_place_command, Text(equals='–û—Ç–∑—ã–≤—ã üë•'))
	dp.register_message_handler(show_types_shop, Text(equals='–¢–æ–≤–∞—Ä—ã üì¶'))
	
	dp.register_callback_query_handler(del_bays_akk_run,lambda x: x.data and x.data.startswith('Send_bay '))
	dp.register_callback_query_handler(del_bays_uls_run,lambda x: x.data and x.data.startswith('Send_bay_usl '))
	dp.register_callback_query_handler(del_bays_uls_run_dollar,lambda x: x.data and x.data.startswith('$'))
	dp.register_message_handler(pokupka, commands=['Send'])
	#dp.register_message_handler(load_Number,state=None)
	dp.register_message_handler(save_log_usl,state=usl_akk_data.log)
	#dp.register_message_handler(save_pass_usl,state=usl_akk_data.pas)
	dp.register_message_handler(Save_number,state=Number_akk.Number_user)
	dp.register_message_handler(Save_number_help,state=help_number.nomer)
	dp.register_message_handler(Save_number_usl,state=Number.Number_user)


	dp.register_callback_query_handler(pizza_menu_command,text = 'show_akk_shop__')
	dp.register_callback_query_handler(show_akk_shop,text = 'show_akk_shop_')
	dp.register_callback_query_handler(show_uslugi_shop,text = 'show_uslugi_shop_')

	dp.register_callback_query_handler(back_to_shop,text = 'back_to_shop_')
	dp.register_message_handler(my_balance, Text(equals='–ë–∞–ª–∞–Ω—Å üí∏'))
	dp.register_callback_query_handler(check,text_contains="che—Åk_")
	dp.register_message_handler(balance_uper,state=balance.need_balance)
	dp.register_callback_query_handler(up_balance, text_contains='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥_')

	dp.register_callback_query_handler(akk_WOT_Blitz,text_contains="akk_WOT_Blitz_")
	dp.register_callback_query_handler(akk_Brawl_stars,text_contains="akk_Brawl_stars_")
	dp.register_callback_query_handler(akk_PUBG_M,text_contains="akk_PUBG_M_")
	dp.register_callback_query_handler(akk_Standoff,text_contains="akk_Standoff_")

	dp.register_callback_query_handler(tech_help,text_contains="tech_help_")

	dp.register_callback_query_handler(usl_WOT_Blitz,text_contains="usl_WOT_Blitz_")
	dp.register_callback_query_handler(usl_Brawl_stars,text_contains="usl_Brawl_stars_")
	dp.register_callback_query_handler(usl_PUBG,text_contains="usl_PUBG_M_")
	dp.register_callback_query_handler(usl_Standoff,text_contains="usl_Standoff_")